#setttings ----
library(ggplot2)
library(readr)
library(tidyr)
library(leaflet)
library(leaflet.extras)
library(shiny)
library(rebus)
library(stringr)
library(dplyr)

load("chicago.rda")
load("dados.rda")

opcoes <- unique(chicago$tipoCrime)
opcoes <- opcoes[order(opcoes)]

#ui ----
ui <- fluidPage(
  
  
  title = "Crimes em Chicago",
  
  sidebarLayout(
    mainPanel(
      tabsetPanel(
        tabPanel("Mapa",  leafletOutput(outputId = "teste", width="150%", height="600px")),
        tabPanel("Calor",  leafletOutput(outputId = "heat", width="150%", height="600px")),
        tabPanel("Estatísticas", plotOutput("comparacao"))
      )
    ),
    
    sidebarPanel(
      
      dateRangeInput('datas',
                     label = paste('selecione o intervalo de tempo a ser considerado(ano-mês-dia): '),
                     start = "10/01/2014", end = "12/30/2015",
                     min = "01/01/2012", max = "01/01/2017",
                     separator = " / ", format = "yyyy-mm-dd",
                     startview = 'year', language = 'pt-BR', weekstart = 1),
      
      selectInput("crimes", "Tipos de crimes*:", choices = opcoes, multiple = T, selected	= opcoes[1]),
      textOutput(outputId = "aviso")
    )
    ###
  )
)

#server ----
server <- function(input, output) {
  
  
  output$teste <- renderLeaflet({
    
    
    coords <- chicago[(chicago$tipoCrime == input$crimes[1]) & 
                      (chicago$Date >=input$datas[1]) & (chicago$Date <= input$datas[2]),] 
    coords %>% 
      leaflet() %>% 
      addTiles() %>% 
      addMarkers(lng = ~Longitude, lat = ~Latitude,
                 clusterOptions = markerClusterOptions,
                 popup = ~`Location Description`) 
  })
  
  output$heat <- renderLeaflet({
    
    coords <- chicago[(chicago$tipoCrime == input$crimes[1]) & 
                        (chicago$Date >=input$datas[1]) & (chicago$Date <= input$datas[2]),]
    
    coords %>% 
      leaflet() %>%
      addProviderTiles(providers$CartoDB.DarkMatter) %>%
      addWebGLHeatmap(lng=~Longitude, lat=~Latitude, size = 2000 )
  })
  
  output$comparacao <- renderPlot({
    
    maiuscula <- function(x){
      y <- str_sub(x, 2, -1)
      z <- str_replace(x, y, tolower(y))
      return(z)
    }
    
    comport <- function(crime = "", quando = NULL){
      
      # Padronizando a data (tirando o dia e deixando formato mm/yyyy)
      MesAno <- str_extract(quando, pattern = START %R% one_or_more(DGT) %R% 
                              or("/", "-", "_", "\\", "|", " ") %R% 
                              one_or_more(DGT))
      Anos <- str_extract(MesAno, pattern = START %R% one_or_more(DGT))
      
      Meses <- str_extract(MesAno, pattern = one_or_more(DGT) %R% END)
      
      MesAno <- c(paste(Meses[1], Anos[1], sep = "/"), paste(Meses[2], Anos[2], sep = "/"))
      
      # Garantindo período válido
      if (!(as.integer(Meses[1]) %in% c(0:12) | as.integer(Meses[1]) %in% c(0:12))){
        stop("Esse mês não existe")
      }
      if (!(as.integer(Meses[2]) %in% c(0:12) | as.integer(Meses[2]) %in% c(0:12))){
        stop("Esse mês não existe")
      }
      if ((Anos[2] > "2017") | ((Anos[2] == "2017") & (Meses[2] > "01"))){
        stop("Os dados vão até 01/2017.")
      }
      if (Anos[1] < "2012"){
        stop("Os dados começam em 01/2012.")
      }  
      if ((Anos[2] < Anos[1]) | ((Anos[2] == Anos[1]) & (Meses[2] < Meses[1]))){
        stop("A data inicial não pode ser depois da data final.")
      }
      
      
      # Define novo banco:
      
      # filtrado pelo tipo de crime
      minhatbl <- filter(dados, `Tipo de Crime` %in% crime) %>%
        arrange(Ano, Mes)
      
      # filtrado pelo período
      inicio <- min(which(minhatbl$Ano == Anos[1] & minhatbl$Mes == Meses[1]))
      fim <- max(which(minhatbl$Ano == Anos[2] & minhatbl$Mes == Meses[2]))
      
      minhatbl <- minhatbl[inicio:fim, ]
      
      # Nome do gráfico
      crime <- vapply(crime, maiuscula, character(1), USE.NAMES = FALSE)
      
      if(length(crime) == 1){
        titulo <- paste("Nº de", crime[1], "por mês") 
      } else if(length(crime) == 2){
        titulo <- paste("Nº de", crime[1], "and", crime[2], "por mês") 
      } else if (length(crime) > 2){
        titulo <- paste("Nº de", crime[1]) 
        for (i in 2:(length(crime)-1)){
          if (i < (length(crime)-1)){
            titulo <- paste(titulo, crime[i], sep = ", ") #Põe vírgula até o antepenúltimo
          } else if (i == (length(crime)-1)){
            titulo <- paste0(titulo, ", ", crime[i], " and ", crime[i+1], " por mês") #Põe o penúltimo "and" ultimo
          }
        }
      }
      
      graf <- ggplot(minhatbl, aes(x = Mes, y = Quantidade, group = `Tipo de Crime`, col = `Tipo de Crime`)) +
        geom_point() + facet_grid(.~Ano) +
        geom_line() + ggtitle(titulo, paste("De", MesAno[1],  "a", MesAno[2])) +
        scale_x_discrete(name = "Mês", labels = c("1", "", "3", "", "5", "", "7", "", "9", "", "11", ""))
      
      return(graf)
    }
    
    comport(input$crimes, input$datas)
    
  })
  
  output$aviso <- {(
    renderText("*No mapa será mostrado apenas ocorrências do primeiro crime selecionado, para obter comparações vá á aba Estatísticas.")
  )}
}

#run ----
shinyApp(ui = ui, server = server)
